package onelemonyboi.miniutilities;

import net.minecraft.block.Block;
import net.minecraft.block.BlockRenderType;
import net.minecraft.block.Blocks;
import net.minecraft.client.gui.ScreenManager;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.client.renderer.RenderTypeLookup;
import net.minecraft.entity.EntityType;
import net.minecraft.tags.BlockTags;
import net.minecraft.tags.EntityTypeTags;
import net.minecraft.tags.ITag;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.fml.DistExecutor;
import net.minecraftforge.fml.InterModComms;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.event.lifecycle.InterModEnqueueEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import onelemonyboi.miniutilities.blocks.earth.EarthBlocks;
import onelemonyboi.miniutilities.blocks.complexblocks.quantumquarry.QuantumQuarryBlock;
import onelemonyboi.miniutilities.blocks.complexblocks.quantumquarry.QuantumQuarryScreen;
import onelemonyboi.miniutilities.blocks.complexblocks.mechanicalblocks.MechanicalMinerBlock;
import onelemonyboi.miniutilities.blocks.complexblocks.mechanicalblocks.MechanicalPlacerBlock;
import onelemonyboi.miniutilities.init.BlockList;
import onelemonyboi.miniutilities.init.ContainerList;
import onelemonyboi.miniutilities.items.Kikoku;
import onelemonyboi.miniutilities.items.enchantments.MoltenHeadHandler;
import onelemonyboi.miniutilities.items.unstable.UnstableHoe;
import onelemonyboi.miniutilities.items.unstable.UnstableShears;
import onelemonyboi.miniutilities.misc.KeyBindings;
import onelemonyboi.miniutilities.misc.KeyBindingsHandler;
import onelemonyboi.miniutilities.packets.Packet;
import onelemonyboi.miniutilities.proxy.ClientProxy;
import onelemonyboi.miniutilities.proxy.IProxy;
import onelemonyboi.miniutilities.proxy.ServerProxy;
import onelemonyboi.miniutilities.blocks.complexblocks.mechanicalblocks.tileentities.screens.MechanicalMinerScreen;
import onelemonyboi.miniutilities.blocks.complexblocks.mechanicalblocks.tileentities.screens.MechanicalPlacerScreen;
import onelemonyboi.miniutilities.world.Config;
import onelemonyboi.miniutilities.world.WorldGen;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import top.theillusivec4.curios.api.SlotTypeMessage;
import top.theillusivec4.curios.api.SlotTypePreset;

import static net.minecraftforge.common.MinecraftForge.EVENT_BUS;

@Mod(MiniUtilities.MOD_ID)
public class MiniUtilities {
    public static final String MOD_ID = "miniutilities";
    public static final ITag<Block> cursedspreadable = BlockTags.makeWrapperTag(new ResourceLocation(MOD_ID, "cursedspreadable").toString());
    public static final ITag<Block> blessedspreadable = BlockTags.makeWrapperTag(new ResourceLocation(MOD_ID, "blessedspreadable").toString());
    public static final ITag<Block> blursedspreadable = BlockTags.makeWrapperTag(new ResourceLocation(MOD_ID, "blursedspreadable").toString());
    public static final ITag<EntityType<?>> blacklisted_entities = EntityTypeTags.getTagById(new ResourceLocation(MOD_ID, "blacklisted").toString());
    public static final Logger LOGGER = LogManager.getLogger();
    public static IProxy proxy = DistExecutor.safeRunForDist(() -> ClientProxy::new, () -> ServerProxy::new);

    public MiniUtilities()
    {
        ModRegistry.register();
        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::setup);
        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::doClientStuff);
        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::enqueueIMC);
        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::setup);
        EVENT_BUS.register(this);
        EVENT_BUS.addListener(EarthBlocks::convertCursed);
        EVENT_BUS.addListener(EarthBlocks::convertBlessed);
        EVENT_BUS.addListener(EarthBlocks::convertBlursed);
        EVENT_BUS.addListener(UnstableShears::instantShear);
        EVENT_BUS.addListener(UnstableHoe::hoeTransformation);
        EVENT_BUS.addListener(WorldGen::generateOres);
        EVENT_BUS.addListener(WorldGen::generatePlants);
        EVENT_BUS.addListener(Kikoku::AnvilUpdateEvent);
        EVENT_BUS.addListener(Kikoku::AnvilRepairEvent);
        EVENT_BUS.addListener(KeyBindingsHandler::keybinds);
        EVENT_BUS.addListener(MechanicalMinerBlock::PlayerInteractEvent);
        EVENT_BUS.addListener(MechanicalPlacerBlock::PlayerInteractEvent);
        EVENT_BUS.addListener(QuantumQuarryBlock::PlayerInteractEvent);
        EVENT_BUS.addListener(MoltenHeadHandler::handleBlockBreak);
        ModLoadingContext.get().registerConfig(ModConfig.Type.CLIENT, Config.CLIENT_CONFIG);
        ModLoadingContext.get().registerConfig(ModConfig.Type.SERVER, Config.SERVER_CONFIG);
        Packet.main();
    }

    private void setup(final FMLCommonSetupEvent event)
    {
        this.preInit(event);
        this.init(event);
        this.postInit(event);
    }
    private void doClientStuff(final FMLClientSetupEvent event) // Render Stuff HERE!!
    {
        RenderTypeLookup.setRenderLayer(BlockList.CursedEarth.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.BlessedEarth.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.BlursedEarth.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.EnderLily.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.FlameLily.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.WhiteLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.LightGrayLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.GrayLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.BlackLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.RedLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.OrangeLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.YellowLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.LimeLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.GreenLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.LightBlueLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.CyanLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.BlueLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.PurpleLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.MagentaLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.PinkLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.BrownLapisCaelestis.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.WoodenSpikes.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.IronSpikes.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.GoldSpikes.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.DiamondSpikes.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BlockList.NetheriteSpikes.get(), RenderType.getCutout());

        RenderType rendertype = RenderType.getTranslucent();
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TRIPWIRE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GRASS_BLOCK, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.IRON_BARS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TRIPWIRE_HOOK, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.HOPPER, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CHAIN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.JUNGLE_LEAVES, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.OAK_LEAVES, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SPRUCE_LEAVES, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ACACIA_LEAVES, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BIRCH_LEAVES, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DARK_OAK_LEAVES, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.OAK_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SPRUCE_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BIRCH_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.JUNGLE_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ACACIA_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DARK_OAK_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WHITE_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ORANGE_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.MAGENTA_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LIGHT_BLUE_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.YELLOW_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LIME_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.PINK_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GRAY_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LIGHT_GRAY_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CYAN_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.PURPLE_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BLUE_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BROWN_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GREEN_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.RED_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BLACK_BED, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POWERED_RAIL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DETECTOR_RAIL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.COBWEB, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GRASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.FERN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_BUSH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SEAGRASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TALL_SEAGRASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DANDELION, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POPPY, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BLUE_ORCHID, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ALLIUM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.AZURE_BLUET, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.RED_TULIP, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ORANGE_TULIP, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WHITE_TULIP, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.PINK_TULIP, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.OXEYE_DAISY, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CORNFLOWER, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WITHER_ROSE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LILY_OF_THE_VALLEY, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BROWN_MUSHROOM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.RED_MUSHROOM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TORCH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WALL_TORCH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SOUL_TORCH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SOUL_WALL_TORCH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.FIRE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SOUL_FIRE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SPAWNER, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.REDSTONE_WIRE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WHEAT, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.OAK_DOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LADDER, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.RAIL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.IRON_DOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.REDSTONE_TORCH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.REDSTONE_WALL_TORCH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CACTUS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SUGAR_CANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.REPEATER, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.OAK_TRAPDOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SPRUCE_TRAPDOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BIRCH_TRAPDOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.JUNGLE_TRAPDOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ACACIA_TRAPDOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DARK_OAK_TRAPDOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CRIMSON_TRAPDOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WARPED_TRAPDOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ATTACHED_PUMPKIN_STEM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ATTACHED_MELON_STEM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.PUMPKIN_STEM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.MELON_STEM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.VINE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LILY_PAD, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.NETHER_WART, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BREWING_STAND, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.COCOA, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BEACON, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.FLOWER_POT, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_OAK_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_SPRUCE_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_BIRCH_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_JUNGLE_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_ACACIA_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_DARK_OAK_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_FERN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_DANDELION, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_POPPY, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_BLUE_ORCHID, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_ALLIUM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_AZURE_BLUET, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_RED_TULIP, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_ORANGE_TULIP, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_WHITE_TULIP, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_PINK_TULIP, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_OXEYE_DAISY, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_CORNFLOWER, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_LILY_OF_THE_VALLEY, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_WITHER_ROSE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_RED_MUSHROOM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_BROWN_MUSHROOM, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_DEAD_BUSH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_CACTUS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CARROTS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTATOES, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.COMPARATOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ACTIVATOR_RAIL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.IRON_TRAPDOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SUNFLOWER, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LILAC, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ROSE_BUSH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.PEONY, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TALL_GRASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LARGE_FERN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SPRUCE_DOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BIRCH_DOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.JUNGLE_DOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ACACIA_DOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DARK_OAK_DOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.END_ROD, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CHORUS_PLANT, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CHORUS_FLOWER, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BEETROOTS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.KELP, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.KELP_PLANT, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TURTLE_EGG, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_TUBE_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_BRAIN_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_BUBBLE_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_FIRE_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_HORN_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TUBE_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BRAIN_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BUBBLE_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.FIRE_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.HORN_CORAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_TUBE_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_BRAIN_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_BUBBLE_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_FIRE_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_HORN_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TUBE_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BRAIN_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BUBBLE_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.FIRE_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.HORN_CORAL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_TUBE_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_BRAIN_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_BUBBLE_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_FIRE_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.DEAD_HORN_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TUBE_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BRAIN_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BUBBLE_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.FIRE_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.HORN_CORAL_WALL_FAN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SEA_PICKLE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CONDUIT, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BAMBOO_SAPLING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BAMBOO, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_BAMBOO, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SCAFFOLDING, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.STONECUTTER, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LANTERN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SOUL_LANTERN, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CAMPFIRE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SOUL_CAMPFIRE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SWEET_BERRY_BUSH, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WEEPING_VINES, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WEEPING_VINES_PLANT, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TWISTING_VINES, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.TWISTING_VINES_PLANT, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.NETHER_SPROUTS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CRIMSON_FUNGUS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WARPED_FUNGUS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CRIMSON_ROOTS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WARPED_ROOTS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_CRIMSON_FUNGUS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_WARPED_FUNGUS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_CRIMSON_ROOTS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.POTTED_WARPED_ROOTS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CRIMSON_DOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WARPED_DOOR, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ICE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.NETHER_PORTAL, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WHITE_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ORANGE_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.MAGENTA_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LIGHT_BLUE_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.YELLOW_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LIME_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.PINK_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GRAY_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LIGHT_GRAY_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CYAN_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.PURPLE_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BLUE_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BROWN_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GREEN_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.RED_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BLACK_STAINED_GLASS, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.WHITE_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.ORANGE_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.MAGENTA_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LIGHT_BLUE_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.YELLOW_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LIME_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.PINK_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GRAY_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.LIGHT_GRAY_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.CYAN_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.PURPLE_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BLUE_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BROWN_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.GREEN_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.RED_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BLACK_STAINED_GLASS_PANE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.SLIME_BLOCK, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.HONEY_BLOCK, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.FROSTED_ICE, rendertype);
        RenderTypeLookup.TYPES_BY_BLOCK.put(Blocks.BUBBLE_COLUMN, rendertype);

        ScreenManager.registerFactory(ContainerList.MinerContainer.get(), MechanicalMinerScreen::new);
        ScreenManager.registerFactory(ContainerList.PlacerContainer.get(), MechanicalPlacerScreen::new);
        ScreenManager.registerFactory(ContainerList.QuarryContainer.get(), QuantumQuarryScreen::new);

        KeyBindings.register();
    }

    private void enqueueIMC(InterModEnqueueEvent event) {
        InterModComms.sendTo("curios", SlotTypeMessage.REGISTER_TYPE, () -> SlotTypePreset.RING.getMessageBuilder().build());
    }

    private void preInit(FMLCommonSetupEvent event) {
        proxy.preInit(event);
    }

    private void init(FMLCommonSetupEvent event) {
        proxy.init(event);
    }

    private void postInit(FMLCommonSetupEvent event) {
        proxy.postInit(event);
    }

    public static Logger getLogger()
    {
        return LOGGER;
    }
}
